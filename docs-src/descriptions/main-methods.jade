h2#main-methods Main observable methods


+descr-method('on-value', 'onValue', 'obs.onValue(fn)').
  Subscribes #[b fn] functions to values on an observable.

p.
  If called on a property, which has a current value,
  the #[b fn] function will be called immediately (synchronously)
  with that value as an argument.

pre(title='example').
  var emitter = Kefir.emitter();
  emitter.onValue(function(x) {  console.log('value:', x)  });
  emitter.emit(1);
  emitter.emit(2);

pre(title='console output')
  :escapehtml
    > value: 1
    > value: 2

+descr-method('off-value', 'offValue', 'obs.offValue(fn)').
  Unsubscribes #[b fn] from values on an observable.


+descr-method('on-error', 'onError', 'obs.onError(fn)').
  Subscribes #[b fn] functions to #[a(href='#about-errors') errors] on an observable.

p.
  If called on a property, which has a current error,
  the #[b fn] function will be called immediately (synchronously)
  with that error as an argument.

pre(title='example').
  var emitter = Kefir.emitter();
  emitter.onError(function(x) {  console.log('error:', x)  });
  emitter.error(1);
  emitter.error(2);

pre(title='console output')
  :escapehtml
    > error: 1
    > error: 2

+descr-method('off-error', 'offError', 'obs.offError(fn)').
  Unsubscribes #[b fn] from errors on an observable.


+descr-method('on-end', 'onEnd', 'obs.onEnd(fn)').
  Subscribes #[b fn] functions to ending off an observable.

p.
  If observable already ended, #[b fn] will be called immediately (synchronously).

pre(title='example').
  var emitter = Kefir.emitter();
  emitter.onEnd(function(x) {  console.log('stream ended')  });
  emitter.end();

pre(title='console output')
  :escapehtml
    > stream ended

+descr-method('off-end', 'offEnd', 'obs.offEnd(fn)').
  Unsubscribes #[b fn] from ending off an observable.

+descr-method('on-any', 'onAny', 'obs.onAny(fn)').
  Subscribes #[b fn] functions to all three types of events.
  Callback is called with #[b event object] as argument. Each event object
  contains three attributes â€” #[b type], #[b value], and #[b current].

ul
  li
    | #[b type] is a <tt>'value'</tt>, <tt>'error'</tt>, or <tt>'end'</tt> string
  li
    | #[b value] is a value or error that was emitted,
    | or <tt>undefined</tt> if #[b type] was <tt>'end'</tt>
  li
    | #[b current] is a boolean, that equals <tt>true</tt> if callback was
    | called with current value of a property, or on end of already ended observable

pre(title='example').
  var emitter = Kefir.emitter();
  emitter.onAny(function(event) {  console.log('event:', event)  });
  emitter.emit(1);
  emitter.error(2);
  emitter.end();

pre(title='console output')
  :escapehtml
    > event: Object {type: "value", value: 1, current: false}
    > event: Object {type: "error", value: 2, current: false}
    > event: Object {type: "end", value: undefined, current: false}

+descr-method('off-any', 'offAny', 'obs.offAny(fn)').
  Unsubscribes an #[b onAny] subscriber.

+descr-method('log', 'log', 'obs.log([name])').
  Turns on logging of any events to browser console.
  Accepts optional #[b name] argument that will be shown in the log if provided.

pre(title='example').
  var emitter = Kefir.emitter();
  emitter.log('myEmitter');
  emitter.emit(1);
  emitter.emit(2);
  emitter.end();

pre(title='console output')
  :escapehtml
    > myEmitter <value> 1
    > myEmitter <value> 2
    > myEmitter <end>

+descr-method('off-log', 'offLog', 'obs.offLog([name])').
  Turns off logging. If #[b .log] was called with a #[b name] argument,
  #[b offLog] must be called with the same #[b name] argument.
