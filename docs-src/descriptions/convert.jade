h2#convert Convert observables


+descr-method('to-property', 'toProperty', 'stream.toProperty([current])').
  Converts a stream to a property.
  Accepts optional <b>current</b> argument, which becomes current value of the
  property.

p.
  You can also call #[b toProperty] on a property.
  If called on a property that already has a current value,
  just returns same property with same current value.
  But if source property has no current value,
  specified value will be the current value of the result property.

pre(title='example').
  var source = Kefir.sequentially(100, [1, 2, 3]);
  var result = source.toProperty(0);
  result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty] <value:current> 0
    > [sequentially.toProperty] <value> 1
    > [sequentially.toProperty] <value> 2
    > [sequentially.toProperty] <value> 3
    > [sequentially.toProperty] <end>

pre(title='events in time').
  source:  ----1----2----3X
  result: 0----1----2----3X

p(id='with-default' style='margin-top: 0').
  There is also deprecated method #[tt .withDefault(current)] that works
  exactly as #[b toProperty], but the #[b current] argument is required.
  This method will be removed in the future.



+descr-method('changes', 'changes', 'property.changes()').
  Converts a property to a stream.
  If property has current value, it will be ignored
  (stream's subscribers won't get it).

p.
  If you call #[b changes] on a stream, it'll just return same stream.

pre(title='example').
  var source = Kefir.sequentially(100, [1, 2, 3]);
  var property = source.toProperty(0);
  var result = property.changes();
  result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty.changes] <value> 1
    > [sequentially.toProperty.changes] <value> 2
    > [sequentially.toProperty.changes] <value> 3
    > [sequentially.toProperty.changes] <end>

pre(title='events in time').
  property: 0----1----2----3X
  result:    ----1----2----3X
div
